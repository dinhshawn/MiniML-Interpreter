(*
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;

(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException ;;


(*......................................................................
  Environments and values
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      try
        !(snd (List.find (fun x -> (fst x) = varname) env))
      with
      | Not_found -> raise (EvalError "variable has no value") ;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: env ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_abstract_string exp
      | Closure (exp, env) ->
        if printenvp then exp_to_abstract_string exp ^ ", [" ^
                          env_to_string env ^ "]"
        else exp_to_abstract_string exp

    (* Returns a printable string representation of an environment *)
    and env_to_string (env : env) : string =
      "{" ^
      List.fold_left (fun acc (vari, va) -> acc ^ vari ^ "âŠ¢" ^
                                            (value_to_string !va) ^ ", ") "" env
      ^ "}" ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below, evaluates an expression exp
  in an enviornment env returning a result of type value. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a value and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures).

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as eval_e below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let rec eval_exp (sub_exp : expr) : expr =
    match sub_exp with
    | Var v -> raise (EvalError ("unbound value " ^ v))
    | Num _i -> sub_exp
    | Bool _b -> sub_exp
    | Unop (_u, ex) ->
      (match eval_exp ex with
       | Num i -> Num(~-i)
       | Bool b -> Bool(not b)
       | _ -> raise (EvalError "type error"))
    | Binop (b, ex1, ex2) ->
      (match (eval_exp ex1), (eval_exp ex2) with
       | Num i1, Num i2 ->
         (match b with
         | Plus -> Num(i1 + i2)
         | Minus -> Num(i1 - i2)
         | Times -> Num(i1 * i2)
         | Equals -> Bool(i1 = i2)
         | LessThan -> Bool(i1 < i2))
       | Bool bo1, Bool bo2 ->
         (match b with
          | Equals -> Bool(bo1 = bo2)
          | LessThan -> Bool(bo1 < bo2)
          | _ -> raise (EvalError "type error"))
       | _, _ -> raise (EvalError "type error"))
    | Conditional (b, ex2, ex3) ->
      (match eval_exp b with
       | Bool tf -> if tf then eval_exp ex2 else eval_exp ex3
       | _ -> raise (EvalError "type error"))
    | Fun _ -> sub_exp
    | Let (v, ex1, ex2) ->
      eval_exp (subst v (eval_exp ex1) ex2)
    | Letrec (v, ex1, ex2) ->
      let rec_exp = subst v (Letrec(v, ex1, Var v)) ex1 in
      eval_exp(subst v rec_exp ex2)
    | Raise -> raise (EvalError "Error raised")
    | Unassigned -> sub_exp
    | App (ex1, ex2) ->
      match eval_exp ex1 with
      | Fun (v, f_ex) -> eval_exp (subst v (eval_exp ex2) f_ex)
      | _ -> raise (EvalError
                      ("(" ^ (exp_to_concrete_string sub_exp) ^ ") bad redex"))
  in
  Env.Val (eval_exp (exp)) ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let eval_d (exp : expr) (env : Env.env) : Env.value =
  let rec d_eval_exp (sub_exp : expr) (sub_env : Env.env) : expr =
    match sub_exp, sub_env with
    | Var v, e ->
      (match Env.lookup e v with
       | Val ex -> ex
       | _ -> raise (EvalError "type error"))
    | Num _i, _e -> sub_exp
    | Bool _b, _e -> sub_exp
    | Unop (_u, ex), e ->
      (match d_eval_exp ex e with
       | Num i -> Num(~-i)
       | Bool b -> Bool(not b)
       | _ -> raise (EvalError "type error"))
    | Binop (b, ex1, ex2), e ->
      (match (d_eval_exp ex1 e), (d_eval_exp ex2 e) with
       | Num i1, Num i2 ->
         (match b with
         | Plus -> Num(i1 + i2)
         | Minus -> Num(i1 - i2)
         | Times -> Num(i1 * i2)
         | Equals -> Bool(i1 = i2)
         | LessThan -> Bool(i1 < i2))
       | Bool bo1, Bool bo2 ->
         (match b with
          | Equals -> Bool(bo1 = bo2)
          | LessThan -> Bool(bo1 < bo2)
          | _ -> raise (EvalError "type error"))
       | _, _ -> raise (EvalError "type error"))
    | Conditional (b, ex2, ex3), e ->
      (match d_eval_exp b e with
       | Bool tf -> if tf then d_eval_exp ex2 e else d_eval_exp ex3 e
       | _ -> raise (EvalError "type error"))
    | Fun _, _e -> sub_exp
    | App (ex1, ex2), e ->
      (match d_eval_exp ex1 e, d_eval_exp ex2 e with
       | Fun (v, f_ex), ex2_v2 ->
         d_eval_exp f_ex (Env.extend e v (ref (Env.Val (ex2_v2))))
       | _ -> raise (EvalError "type error"))
    | Let (v, ex1, ex2), e ->
      d_eval_exp ex2 (Env.extend e v (ref (Env.Val (d_eval_exp ex1 e))))
    | Letrec (v, ex1, ex2), e ->
      let let_def =
        d_eval_exp ex1 (Env.extend e v (ref (Env.Val Unassigned))) in
      d_eval_exp ex2 (Env.extend e v (ref (Env.Val let_def)))
    | Raise, _e -> raise (EvalError "Error raised")
    | Unassigned, _e -> raise (EvalError "Unassigned evaluated")
  in
  Env.Val (d_eval_exp exp env) ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within eval_s, eval_d, or eval_l. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;

(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)

let evaluate = eval_d ;;
